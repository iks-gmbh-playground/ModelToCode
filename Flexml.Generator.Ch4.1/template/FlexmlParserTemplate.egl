[% import "../script/XmlParserUtils.eol"; %]
/**
 * Generated from TemplateElementParser.egl at @GENERATIONTIME@
 * If changes are necessary, make them there
 */
package flexml.parser;

import javax.xml.namespace.QName;
import javax.xml.stream.XMLEventReader;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.events.Attribute;
import javax.xml.stream.events.EndElement;
import javax.xml.stream.events.StartElement;
import javax.xml.stream.events.XMLEvent;

import flexml.elements.[%= element.getElementClassName() %];

/**
 * 
 * [%= element.desc %]<br>
 * This is the corresponding parser class
 */
public class [%= element.getParserClassName() %] {
	private [%= element.getElementClassName() %] result = new [%= element.getElementClassName() %]();

	public [%= element.getParserClassName() %]() {
		
	}
	
	public [%= element.getElementClassName() %] parse[%= element.getElementClassName() %](XMLEventReader inEventReader, XMLEvent inEvent) {
		handle[%= element.getElementClassName() %]StartEvent(inEvent);
		return parseUntilEndElement(inEventReader);
	}
	
	private [%= element.getElementClassName() %] parseUntilEndElement(XMLEventReader inEventReader) {
		boolean endElementFound = false;
		while (inEventReader.hasNext() && ! endElementFound) {
			try {
				endElementFound = handleEvent(inEventReader, inEventReader.nextEvent());				
			} catch (XMLStreamException e) {
				e.printStackTrace();
			}
		}
		return result;
	}
	
	@SuppressWarnings("unused")
	private void handle[%= element.getElementClassName() %]StartEvent(XMLEvent inFileStartEvent) {
		result = new [%= element.getElementClassName() %]();

		StartElement start = inFileStartEvent.asStartElement();

		[% for (attribute in element.attribute) { %]
		Attribute [%= attribute.name %] = start.getAttributeByName(new QName("[%= attribute.name %]"));
		if (null != [%= attribute.name %]) {
			result.[%= attribute.getSetterName() %]([%= attribute.name %].getValue());
		}
		[% } %]
	}
	
	private boolean handleEvent(XMLEventReader inEventReader, XMLEvent inEvent) {
		if (inEvent.isStartElement()) {
			handleChildStartElement(inEventReader, inEvent);
		} else if (inEvent.isEndElement()) {
			return handleEndElement(inEvent);
		[% if (element.hasText()) { %]
		} else if (inEvent.isCharacters()) {
			handleCharacters(inEvent);
		[% } %]			
		}
		return false;
	}
	
	/**
	 * Handle the start event for a child and delegate to parser for that child
	 * @param inEventReader The event reader
	 * @param inEvent The current start event
	 */	
	private void handleChildStartElement(XMLEventReader inEventReader, XMLEvent inEvent) {
		StartElement start = inEvent.asStartElement();
		switch (start.getName().getLocalPart()) {
		[% for (child in element.child) { %]
		[% var childElement : Element = child.getChildElement(); %]
		case "[%= childElement.name %]":
		[% for (curAlias in childElement.aliasName) { %]
		case "[%= curAlias %]":
		[% } %]		
			result.add[%= childElement.getMethodName() %](new [%= childElement.getParserClassName() %]().parse[%= childElement.getElementClassName() %](inEventReader, inEvent));
			break;
		[% } %]
			
		default:
		}
	}
	
	/**
	 * Look for the end event for this element
	 * @param inEvent The current end event
	 * @return true, wenn the end event for this element is found
	 */
	private boolean handleEndElement(XMLEvent inEvent) {
		EndElement end = inEvent.asEndElement();
		switch (end.getName().getLocalPart()) {
		case "[%= element.name %]":
		[% for (curAlias in element.aliasName) { %]
		case "[%= curAlias %]":
		[% } %]		
			return true;
			
		default:
		}
		return false;
	}
	
	[% if (element.hasText()) { %]
	private void handleCharacters(XMLEvent inEvent) {
		result.appendText(inEvent.asCharacters().getData().trim());	}
	[% } %]			
	

}
