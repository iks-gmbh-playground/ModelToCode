@namespace(
	uri="http://flexible.xml/version1",
	prefix="f")
package flexml;

enum Multiplicity {
	ZeroOrOne;
	One;
	ZeroOrMany;
	OneOrMany;
}

class NamedObject {
	attr String name;
	attr String desc;
}

class Attribute extends NamedObject {
}

@exeed(label="
var str : String;
str = '<' + self.name + '>';
// concat aliases, if set
if (not self.aliasName.isEmpty()) {
 str = str + ' (' + self.aliasName.concat + ')';	
}
return  str;", classIcon="class")
class Element extends NamedObject {
	attr String [*] aliasNames;  // Aliases for this element
	val Attribute[*] attributes;
	val Child[*] children;
	attr Boolean hasText; // Does this element contain text?
}

@exeed(label="return '<'+self.child.name+'>' + ' (' +self.multiplicity + ')';", classIcon="link")
class Child {
	attr Multiplicity multiplicity; // Multiplicity of this child type
	ref Element child;
}

@exeed(classIcon="model")
class Definition {
	val Element root; // The root element of the XML
	val Element[+] elements; // The set of elements. There has to be at least one: the root
}